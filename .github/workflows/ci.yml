name: Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            pip-
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-minimal.txt
          pip install black flake8 mypy bandit safety pytest pytest-cov
          
      - name: Code formatting check
        run: black --check --diff .
        
      - name: Linting
        run: flake8 scripts/ --max-line-length=88 --extend-ignore=E203,W503
        
      - name: Type checking
        run: mypy scripts/ --ignore-missing-imports
        
      - name: Security scan
        run: bandit -r scripts/ -f json -o bandit-report.json || true
        
      - name: Dependency vulnerability check
        run: safety check --json --output safety-report.json || true
        
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('requirements*.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-minimal.txt
          pip install pytest pytest-cov pytest-mock
          
      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            --cov=scripts \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junit-xml=test-results.xml \
            -v
            
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            htmlcov/

  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          
      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: |
            terraform/.terraform
            terraform/.terraform.lock.hcl
          key: terraform-${{ hashFiles('terraform/**/*.tf') }}
          
      - name: Terraform Format Check
        run: terraform fmt -check -recursive terraform/
        
      - name: Terraform Init (Dev)
        run: |
          cd terraform/environments/dev
          terraform init -backend=false
          
      - name: Terraform Validate (Dev)
        run: |
          cd terraform/environments/dev
          terraform validate
          
      - name: Terraform Plan (Dev)
        run: |
          cd terraform/environments/dev
          terraform plan -out=tfplan
          
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-dev
          path: terraform/environments/dev/tfplan

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build ingestion image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/ingestion.Dockerfile
          push: false
          tags: etl-ingestion:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build transformation image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/transformation.Dockerfile
          push: false
          tags: etl-transformation:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, terraform-validate]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-minimal.txt
          pip install pytest pytest-mock psycopg2-binary
          
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest tests/integration/ -v --tb=short
          
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, terraform-validate, docker-build, integration-tests]
    if: always()
    steps:
      - name: Check build status
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Terraform Validation: ${{ needs.terraform-validate.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          
          if [[ "${{ needs.code-quality.result }}" == "failure" || 
                "${{ needs.unit-tests.result }}" == "failure" || 
                "${{ needs.terraform-validate.result }}" == "failure" || 
                "${{ needs.docker-build.result }}" == "failure" || 
                "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "❌ Build failed"
            exit 1
          else
            echo "✅ Build successful"
          fi
